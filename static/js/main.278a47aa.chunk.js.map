{"version":3,"sources":["Cards/Cards.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","card","minWidth","maxWidth","Cards","props","classes","style","Card","className","CardContent","TextField","id","multiline","variant","value","content","fullWidth","IconButton","aria-label","size","onClick","deleteCard","fontSize","width","App","useState","list","setList","inputVal","setInputVal","React","open","Transition","Fade","snack","setSnack","Grid","container","item","xs","Paper","label","onChange","event","target","onKeyDown","key","persist","changeList","map","index","newList","splice","deleteContent","Snackbar","onClose","TransitionComponent","ContentProps","message","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2UAMMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,SAAU,GAEdC,MAAO,CACHC,QAASJ,EAAMK,QAAQ,GACvBC,UAAW,SACXC,MAAOP,EAAMQ,QAAQC,KAAKC,WAE9BC,KAAM,CACFC,SAAU,IACVC,SAAU,SA8CHC,EAzCD,SAACC,GASX,IAAMC,EAAUlB,IAChB,OASI,yBAAKmB,MAAO,CAACb,QAAS,QACd,kBAACc,EAAA,EAAD,CAAMC,UAAWH,EAAQL,MACrB,kBAACS,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,GAAG,oBACHC,WAAS,EACTC,QAAQ,WACRC,MAASV,EAAMW,QACfC,WAAS,IAEb,yBAAKV,MAAO,CAACX,UAAW,UACpB,kBAACsB,EAAA,EAAD,CAAYrB,MAAM,YAAYsB,aAAW,OAAOC,KAAK,SAASC,QAAWhB,EAAMiB,YAC3E,kBAAC,IAAD,CAAYC,SAAW,kB,0CC/CjDnC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,GAEZC,MAAO,CACLG,UAAW,SACX4B,MAAO,MACP3B,MAAOP,EAAMQ,QAAQC,KAAKC,eAoGfyB,MA5Ff,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEmBF,mBAAS,IAF5B,mBAENG,EAFM,KAEIC,EAFJ,KAGPxB,EAAUlB,IAHH,EAsBa2C,IAAML,SAAS,CACvCM,MAAM,EACNC,WAAYC,MAxBD,mBAsBNC,EAtBM,KAsBCC,EAtBD,KAwCb,OACE,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAAC7B,UAAYH,EAAQf,MAClC,kBAAC8C,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,yBAAK/B,UAAU,OACX,4BAAQA,UAAU,cAChB,wCAGI,kBAACgC,EAAA,EAAD,CAAOhC,UAAWH,EAAQb,OACxB,kBAACkB,EAAA,EAAD,CACES,KAAK,QACLsB,MAAM,WACN5B,QAAQ,SACRG,WAAW,EACXF,MAASc,EACTc,SAlDE,SAACC,GACrBd,EAAYc,EAAMC,OAAO9B,QAkDP+B,UAAa,SAACF,GACK,UAAdA,EAAMG,KAA0C,KAAvBH,EAAMC,OAAO9B,QACvC6B,EAAMI,UAjDX,SAACJ,GAClBhB,GAAQ,SAACD,GAAD,4BAAcA,GAAd,CAAoBiB,EAAMC,OAAO9B,WAiDnBkC,CAAWL,GA7CjCd,EAAY,SAqDDH,EAAKuB,KAAK,SAAClC,EAASmC,GACnB,OACE,kBAAC,EAAD,CACEJ,IAAOI,EACPnC,QAAWA,EACXM,WAAc,kBAvDV,SAAC6B,GACrB,IAAMC,EAAO,YAAOzB,GACpByB,EAAQC,OAAOF,EAAM,GACrBvB,EAAQwB,GAoD4BE,CAAcH,UAK1C,kBAACI,EAAA,EAAD,CACEvB,KAAMG,EAAMH,KACZwB,QA7CQ,WAClBpB,EAAS,eACJD,EADG,CAENH,MAAM,MA2CEyB,oBAAqBtB,EAAMF,WAC3ByB,aAAc,CACZ,mBAAoB,cAEtBC,QAAS,0BAAM/C,GAAG,cAAT,uBC7FHgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.278a47aa.chunk.js","sourcesContent":["import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Card, CardContent,TextField, IconButton} from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n// import EditIcon from '@material-ui/icons/Edit'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    card: {\r\n        minWidth: 550,\r\n        maxWidth: 550,\r\n\r\n    }\r\n  }));\r\n\r\nconst Cards = (props) =>{\r\n    // const [edit, setEdit] = useState({open: true})\r\n\r\n    // const changeEditHandler = () =>{\r\n    //     setEdit({\r\n    //         open: !edit\r\n    //     })\r\n    // }\r\n\r\n    const classes = useStyles();\r\n    return(\r\n        // <Grid \r\n        //     container \r\n        //     direction = \"column\"\r\n        //     justify=\"flex-start\" \r\n        //     alignItems=\"center\" \r\n        //     className={classes.root}\r\n        // >\r\n        //     <Grid item xs={12} >\r\n        <div style={{padding: \"5px\"}}>\r\n                <Card className={classes.card}>\r\n                    <CardContent>\r\n                        <TextField\r\n                            id=\"outlined-textarea\"\r\n                            multiline\r\n                            variant=\"outlined\"\r\n                            value = {props.content}\r\n                            fullWidth\r\n                        />\r\n                        <div style={{textAlign: \"right\"}}>\r\n                            <IconButton color=\"secondary\" aria-label=\"edit\" size=\"medium\" onClick = {props.deleteCard}>\r\n                                <DeleteIcon fontSize = \"medium\"/>\r\n                            </IconButton>\r\n                        </div>\r\n                    </CardContent>\r\n                </Card>\r\n        </div>\r\n        //     </Grid>\r\n        // </Grid>\r\n    )\r\n}\r\nexport default Cards;","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';  \nimport './App.css';\nimport Cards from './Cards/Cards'\nimport { TextField, Paper, Grow, Fade, Snackbar, Grid} from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    textAlign: 'center',\n    width: '60%',\n    color: theme.palette.text.secondary,\n  },\n}))\n\nconst GrowTransition = (props) =>{\n  return <Grow {...props} />;\n}\n\nfunction App() {\n  const [list, setList] = useState([])\n  const [inputVal, setInputVal] = useState('')\n  const classes = useStyles()\n\n  const onChangeInput = (event) =>{\n    setInputVal(event.target.value)\n  }\n\n  const changeList = (event) =>{\n    setList((list) => [...list, event.target.value])\n  }\n\n  const onClearInput = () =>{\n    setInputVal('')\n  }\n\n  const deleteContent = (index) =>{\n    const newList = [...list]\n    newList.splice(index,1)\n    setList(newList)\n  }\n  const [snack, setSnack] = React.useState({\n    open: false,\n    Transition: Fade,\n  })\n\n  const handleClick = Transition => () => {\n    setSnack({\n      open: true,\n      Transition,\n    })\n  }\n\n  const handleClose = () => {\n    setSnack({\n      ...snack,\n      open: false,\n    });\n  };\n  return (\n    <Grid container className= {classes.root} >\n      <Grid item xs={12}>\n        <div className=\"App\">\n            <header className=\"App-header\">\n              <p>\n                ToDo List\n              </p>\n                  <Paper className={classes.paper}>\n                    <TextField\n                      size=\"small\"\n                      label=\"Write...\"\n                      variant=\"filled\"\n                      fullWidth={true}\n                      value = {inputVal}\n                      onChange = {onChangeInput}\n                      onKeyDown ={ (event) =>{\n                        if(event.key === 'Enter' && event.target.value !== \"\"){\n                          event.persist()\n                          changeList(event)\n                          onClearInput()\n                        }else{\n                          handleClick(GrowTransition)\n                        }\n                      }}\n                    />\n                  </Paper>\n              {list.map( (content, index) =>{\n                return(\n                  <Cards \n                    key = {index}\n                    content = {content} \n                    deleteCard = {() => deleteContent(index)}\n                  />\n                )\n              })}\n            </header>\n            <Snackbar\n              open={snack.open}\n              onClose={handleClose}\n              TransitionComponent={snack.Transition}\n              ContentProps={{\n                'aria-describedby': 'message-id',\n              }}\n              message={<span id=\"message-id\">I love snacks</span>}\n            />\n          </div>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}