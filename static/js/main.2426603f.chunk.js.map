{"version":3,"sources":["Cards/Cards.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","card","width","Cards","props","classes","style","padding","Card","className","CardContent","TextField","id","multiline","variant","value","content","fullWidth","textAlign","IconButton","color","aria-label","size","onClick","deleteCard","fontSize","paper","palette","text","secondary","App","useState","list","setList","inputVal","setInputVal","React","open","Transition","Fade","snack","setSnack","Grid","container","item","xs","Paper","label","onChange","event","target","onKeyDown","key","persist","changeList","direction","justify","alignItems","map","index","newList","splice","deleteContent","Snackbar","onClose","TransitionComponent","ContentProps","message","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2UAKMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,SAAU,GAEdC,KAAM,CACFC,MAAO,YA4BAC,EAxBD,SAACC,GAEX,IAAMC,EAAUT,IAChB,OACI,yBAAKU,MAAO,CAACC,QAAS,QACd,kBAACC,EAAA,EAAD,CAAMC,UAAWJ,EAAQJ,MACrB,kBAACS,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,GAAG,oBACHC,WAAS,EACTC,QAAQ,WACRC,MAASX,EAAMY,QACfC,WAAS,IAEb,yBAAKX,MAAO,CAACY,UAAW,UACpB,kBAACC,EAAA,EAAD,CAAYC,MAAM,YAAYC,aAAW,OAAOC,KAAK,SAASC,QAAWnB,EAAMoB,YAC3E,kBAAC,IAAD,CAAYC,SAAW,iB,0CCxBjD7B,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,GAEZ0B,MAAO,CACLR,UAAW,SACXhB,MAAO,MACPkB,MAAOtB,EAAM6B,QAAQC,KAAKC,eAiHfC,MAzGf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEmBF,mBAAS,IAF5B,mBAENG,EAFM,KAEIC,EAFJ,KAGP9B,EAAUT,IAHH,EAsBawC,IAAML,SAAS,CACvCM,MAAM,EACNC,WAAYC,MAxBD,mBAsBNC,EAtBM,KAsBCC,EAtBD,KAwCb,OACE,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAAClC,UAAYJ,EAAQN,MAClC,kBAAC2C,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,yBAAKpC,UAAU,OACX,4BAAQA,UAAU,cAChB,wCAGI,kBAACqC,EAAA,EAAD,CAAOrC,UAAWJ,EAAQqB,OACxB,kBAACf,EAAA,EAAD,CACEW,KAAK,QACLyB,MAAM,WACNjC,QAAQ,SACRG,WAAW,EACXF,MAASmB,EACTc,SAlDE,SAACC,GACrBd,EAAYc,EAAMC,OAAOnC,QAkDPoC,UAAa,SAACF,GACK,UAAdA,EAAMG,KAA0C,KAAvBH,EAAMC,OAAOnC,QACvCkC,EAAMI,UAjDX,SAACJ,GAClBhB,GAAQ,SAACD,GAAD,4BAAcA,GAAd,CAAoBiB,EAAMC,OAAOnC,WAiDnBuC,CAAWL,GA7CjCd,EAAY,SAqDE,kBAACO,EAAA,EAAD,CACIC,WAAS,EACTY,UAAY,SACZC,QAAQ,aACRC,WAAW,UACXhD,UAAWJ,EAAQN,KACnBO,MAAO,CAACJ,MAAM,QAEhB,kBAACwC,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACZb,EAAK0B,KAAK,SAAC1C,EAAS2C,GACnB,OACM,kBAAC,EAAD,CACEP,IAAOO,EACP3C,QAAWA,EACXQ,WAAc,kBAhEtB,SAACmC,GACrB,IAAMC,EAAO,YAAO5B,GACpB4B,EAAQC,OAAOF,EAAM,GACrB1B,EAAQ2B,GA6DwCE,CAAcH,YAStD,kBAACI,EAAA,EAAD,CACE1B,KAAMG,EAAMH,KACZ2B,QA1DQ,WAClBvB,EAAS,eACJD,EADG,CAENH,MAAM,MAwDE4B,oBAAqBzB,EAAMF,WAC3B4B,aAAc,CACZ,mBAAoB,cAEtBC,QAAS,0BAAMvD,GAAG,cAAT,uBC1GHwD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2426603f.chunk.js","sourcesContent":["import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Card, CardContent,TextField, IconButton} from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    card: {\r\n        width: \"100%\"\r\n    }\r\n  }));\r\n\r\nconst Cards = (props) =>{\r\n\r\n    const classes = useStyles();\r\n    return(\r\n        <div style={{padding: \"5px\"}}>\r\n                <Card className={classes.card}>\r\n                    <CardContent>\r\n                        <TextField\r\n                            id=\"outlined-textarea\"\r\n                            multiline\r\n                            variant=\"outlined\"\r\n                            value = {props.content}\r\n                            fullWidth\r\n                        />\r\n                        <div style={{textAlign: \"right\"}}>\r\n                            <IconButton color=\"secondary\" aria-label=\"edit\" size=\"medium\" onClick = {props.deleteCard}>\r\n                                <DeleteIcon fontSize = \"medium\"/>\r\n                            </IconButton>\r\n                        </div>\r\n                    </CardContent>\r\n                </Card>\r\n        </div>\r\n    )\r\n}\r\nexport default Cards;","import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';  \r\nimport './App.css';\r\nimport Cards from './Cards/Cards'\r\nimport { TextField, Paper, Grow, Fade, Snackbar, Grid} from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    textAlign: 'center',\r\n    width: '70%',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n}))\r\n\r\nconst GrowTransition = (props) =>{\r\n  return <Grow {...props} />;\r\n}\r\n\r\nfunction App() {\r\n  const [list, setList] = useState([])\r\n  const [inputVal, setInputVal] = useState('')\r\n  const classes = useStyles()\r\n\r\n  const onChangeInput = (event) =>{\r\n    setInputVal(event.target.value)\r\n  }\r\n\r\n  const changeList = (event) =>{\r\n    setList((list) => [...list, event.target.value])\r\n  }\r\n\r\n  const onClearInput = () =>{\r\n    setInputVal('')\r\n  }\r\n\r\n  const deleteContent = (index) =>{\r\n    const newList = [...list]\r\n    newList.splice(index,1)\r\n    setList(newList)\r\n  }\r\n  const [snack, setSnack] = React.useState({\r\n    open: false,\r\n    Transition: Fade,\r\n  })\r\n\r\n  const handleClick = Transition => () => {\r\n    setSnack({\r\n      open: true,\r\n      Transition,\r\n    })\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setSnack({\r\n      ...snack,\r\n      open: false,\r\n    });\r\n  };\r\n  return (\r\n    <Grid container className= {classes.root} >\r\n      <Grid item xs={12}>\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n              <p>\r\n                ToDo List\r\n              </p>\r\n                  <Paper className={classes.paper}>\r\n                    <TextField\r\n                      size=\"small\"\r\n                      label=\"Write...\"\r\n                      variant=\"filled\"\r\n                      fullWidth={true}\r\n                      value = {inputVal}\r\n                      onChange = {onChangeInput}\r\n                      onKeyDown ={ (event) =>{\r\n                        if(event.key === 'Enter' && event.target.value !== \"\"){\r\n                          event.persist()\r\n                          changeList(event)\r\n                          onClearInput()\r\n                        }else{\r\n                          handleClick(GrowTransition)\r\n                        }\r\n                      }}\r\n                    />\r\n                  </Paper>\r\n                  <Grid \r\n                      container\r\n                      direction = \"column\"\r\n                      justify=\"flex-start\" \r\n                      alignItems=\"stretch\" \r\n                      className={classes.root}\r\n                      style={{width:\"55%\"}}\r\n                  >\r\n                    <Grid item xs={12}>\r\n                      {list.map( (content, index) =>{\r\n                        return(\r\n                              <Cards \r\n                                key = {index}\r\n                                content = {content} \r\n                                deleteCard = {() => deleteContent(index)}\r\n                                 \r\n                              />\r\n                          \r\n                        )\r\n                      })}\r\n                    </Grid>\r\n                  </Grid>\r\n            </header>\r\n            <Snackbar\r\n              open={snack.open}\r\n              onClose={handleClose}\r\n              TransitionComponent={snack.Transition}\r\n              ContentProps={{\r\n                'aria-describedby': 'message-id',\r\n              }}\r\n              message={<span id=\"message-id\">I love snacks</span>}\r\n            />\r\n          </div>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}